import streamlit as st
import language_tool_python
import pandas as pd
import matplotlib.pyplot as plt

# Narzƒôdzie do sprawdzania pisowni i gramatyki
tool = language_tool_python.LanguageToolPublicAPI('en-GB')

# Lista temat√≥w egzaminacyjnych
TEMATY = {
    "Opisz swoje ostatnie wakacje": ["holiday", "trip", "beach", "mountains", "memories", "visited", "hotel"],
    "Napisz o swoich planach na najbli≈ºszy weekend": ["weekend", "going to", "plan", "cinema", "friends", "family"],
    "Zaproponuj spotkanie koledze/kole≈ºance z zagranicy": ["meet", "visit", "place", "Poland", "invite", "schedule"],
    "Opisz sw√≥j udzia≈Ç w szkolnym przedstawieniu": ["school play", "role", "stage", "acting", "performance", "nervous"],
    "Podziel siƒô wra≈ºeniami z wydarzenia szkolnego": ["event", "competition", "school", "experience", "memorable"],
    "Opisz swoje nowe hobby": ["hobby", "started", "enjoy", "benefits", "passion"],
    "Opowiedz o swoich do≈õwiadczeniach zwiƒÖzanych z naukƒÖ zdalnƒÖ": ["online learning", "advantages", "disadvantages", "difficult"],
    "Opisz szkolnƒÖ wycieczkƒô, na kt√≥rej by≈Çe≈õ": ["school trip", "visited", "museum", "amazing", "historical"],
    "Zaproponuj wsp√≥lne zwiedzanie ciekawych miejsc w Polsce": ["sightseeing", "places", "Poland", "tour", "recommend"],
}

def ocena_liczby_s≈Ç√≥w(tekst):
    liczba = len(tekst.split())
    if 50 <= liczba <= 120:
        return 2, f"‚úÖ Liczba s≈Ç√≥w: {liczba} ‚Äì Poprawna d≈Çugo≈õƒá."
    elif liczba < 50:
        return 1, f"‚ö†Ô∏è Liczba s≈Ç√≥w: {liczba} ‚Äì Zbyt kr√≥tka wypowied≈∫."
    else:
        return 1, f"‚ö†Ô∏è Liczba s≈Ç√≥w: {liczba} ‚Äì Zbyt d≈Çuga wypowied≈∫ (max 120 s≈Ç√≥w)."

def ocena_tre≈õci(tekst, temat):
    if temat not in TEMATY:
        return 0, "Nie wybrano tematu lub temat nieobs≈Çugiwany."
    kluczowe = TEMATY[temat]
    trafienia = sum(1 for slowo in kluczowe if slowo.lower() in tekst.lower())
    if trafienia >= 5:
        return 4, "Tre≈õƒá w pe≈Çni zgodna z tematem. ≈öwietnie!"
    elif trafienia >= 3:
        return 3, "Dobra zgodno≈õƒá, ale mo≈ºna dodaƒá wiƒôcej szczeg√≥≈Ç√≥w."
    elif trafienia >= 2:
        return 2, "Czƒô≈õciowa zgodno≈õƒá, rozwiniƒôcie tematu jest niewystarczajƒÖce."
    return 1 if trafienia == 1 else 0, "Tre≈õƒá nie jest zgodna z tematem."

def ocena_sp√≥jno≈õci(tekst):
    if any(s in tekst.lower() for s in ["however", "therefore", "firstly", "in conclusion"]):
        return 2, "Tekst jest dobrze zorganizowany."
    return 1, "Sp√≥jno≈õƒá mo≈ºe byƒá lepsza ‚Äì u≈ºyj wiƒôcej wyra≈ºe≈Ñ ≈ÇƒÖczƒÖcych."

def ocena_zakresu(tekst):
    unikalne = set(tekst.lower().split())
    if len(unikalne) > 40:
        return 2, "Bardzo bogate s≈Çownictwo!"
    return 1 if len(unikalne) > 20 else 0, "S≈Çownictwo jest zbyt proste."

def ocena_poprawno≈õci(tekst):
    matches = tool.check(tekst)
    bledy = []
    tekst_zazn = tekst
    for match in matches:
        start = match.offset
        end = start + match.errorLength
        blad = tekst[start:end].strip()
        poprawka = match.replacements[0] if match.replacements else "Brak propozycji"
        if not blad: continue
        tekst_zazn = tekst_zazn.replace(blad, f"**:red[{blad}]**", 1)
        bledy.append((blad, poprawka, "B≈ÇƒÖd gramatyczny"))
    tabela = pd.DataFrame(bledy, columns=["üî¥ B≈ÇƒÖd", "‚úÖ Poprawna forma", "‚ÑπÔ∏è Typ b≈Çƒôdu"]) if bledy else None
    return 2 if len(bledy) == 0 else 1 if len(bledy) < 5 else 0, tabela, tekst_zazn

def pokaz_wykres_oceny(punkty):
    kategorie = ["S≈Çowa", "Tre≈õƒá", "Sp√≥jno≈õƒá", "Zakres", "Poprawno≈õƒá"]
    fig, ax = plt.subplots()
    ax.bar(kategorie, punkty, color='skyblue')
    ax.set_ylim(0, 4)
    st.pyplot(fig)

def ocena_tekstu(tekst, temat):
    pkt_slow, opis_slow = ocena_liczby_s≈Ç√≥w(tekst)
    pkt_tresc, opis_tresc = ocena_tre≈õci(tekst, temat)
    pkt_spojnosc, opis_spojnosc = ocena_sp√≥jno≈õci(tekst)
    pkt_zakres, opis_zakres = ocena_zakresu(tekst)
    pkt_poprawnosci, tabela, tekst_zazn = ocena_poprawno≈õci(tekst)
    suma = min(pkt_slow + pkt_tresc + pkt_spojnosc + pkt_zakres + pkt_poprawnosci, 10)
    punkty_lista = [pkt_slow, pkt_tresc, pkt_spojnosc, pkt_zakres, pkt_poprawnosci]

    wyniki = {
        "üìñ Zgodna liczba s≈Ç√≥w": f"{pkt_slow}/2 - {opis_slow}",
        "üìù Tre≈õƒá": f"{pkt_tresc}/4 - {opis_tresc}",
        "üîó Sp√≥jno≈õƒá i logika": f"{pkt_spojnosc}/2 - {opis_spojnosc}",
        "üìñ Zakres jƒôzykowy": f"{pkt_zakres}/2 - {opis_zakres}",
        "‚úÖ Poprawno≈õƒá jƒôzykowa": f"{pkt_poprawnosci}/2 - Im mniej b≈Çƒôd√≥w, tym lepiej!",
        "üìå ≈ÅƒÖczny wynik::": f"üîπ {suma}/10 pkt"
    }

    return wyniki, tabela, tekst_zazn, punkty_lista

# Streamlit UI
st.set_page_config(page_title="Ocena wypowiedzi pisemnej", layout="centered")
st.title("üìß Automatyczna ocena wypowiedzi pisemnej")

selected_temat = st.selectbox("üìå Wybierz temat:", list(TEMATY.keys()))
email_text = st.text_area("‚úèÔ∏è Wpisz sw√≥j tekst tutaj:")

if st.button("‚úÖ Sprawd≈∫"):
    if email_text:
        wynik, tabela_bledow, tekst_zaznaczony, punkty = ocena_tekstu(email_text, selected_temat)

        st.subheader(":bar_chart: Wyniki oceny:")
        for klucz, wartosc in wynik.items():
            st.write(f"**{klucz}**: {wartosc}")

        st.write("### üåê Por√≥wnanie ocen (wykres):")
        pokaz_wykres_oceny(punkty)

        if tabela_bledow is not None:
            st.write("### ‚ùå Lista b≈Çƒôd√≥w i poprawek:")
            st.dataframe(tabela_bledow, use_container_width=True)

        st.write("### üîç Tekst z zaznaczonymi b≈Çƒôdami:")
        st.markdown(tekst_zaznaczony, unsafe_allow_html=True)

        st.write("### üîπ Jak poprawiƒá wynik?")
        st.markdown("- **Tre≈õƒá:** Dodaj wiƒôcej szczeg√≥≈Ç√≥w i rozwi≈Ñ swoje pomys≈Çy.\n"
                    "- **Sp√≥jno≈õƒá:** U≈ºyj wiƒôcej wyra≈ºe≈Ñ ≈ÇƒÖczƒÖcych, np. _however_, _therefore_, _in addition_.\n"
                    "- **Zakres s≈Çownictwa:** U≈ºyj bardziej r√≥≈ºnorodnych s≈Ç√≥w.\n"
                    "- **Poprawno≈õƒá:** Sprawd≈∫ b≈Çƒôdy gramatyczne i ortograficzne.")

        st.markdown("---")
        st.markdown("**üîó [Zobacz przyk≈ÇadowƒÖ wypowied≈∫ 10/10 pkt](https://example.com/model-answer)**")
